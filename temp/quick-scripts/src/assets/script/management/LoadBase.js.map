{"version":3,"sources":["assets/script/management/LoadBase.ts"],"names":[],"mappings":";;;;;AAAA;;;;GAIG;;;;;;;;AAEG,IAAA,KAAwB,EAAE,CAAC,UAAU,EAAnC,OAAO,aAAA,EAAE,QAAQ,cAAkB,CAAC;AAG5C;IAAA;QAGY,aAAQ,GAAqB,IAAI,GAAG,EAAE,CAAC;IAuEnD,CAAC;iBA1EoB,QAAQ;IAKzB,sBAAkB,oBAAQ;aAA1B;YACI,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE;gBACjB,IAAI,CAAC,SAAS,GAAG,IAAI,UAAQ,EAAE,CAAC;aACnC;YACD,OAAO,IAAI,CAAC,SAAS,CAAC;QAC1B,CAAC;;;OAAA;IACD;;;;;OAKG;IACI,6BAAU,GAAjB,UAAkB,GAAW,EAAE,OAAe;QAA9C,iBAgBC;QAfG,OAAO,IAAI,OAAO,CAAO,UAAC,GAAG;YACzB,IAAI,SAAS,EAAE;gBACX,IAAI,IAAI,GAAG,uCAAuC,CAAC;gBACnD,KAAI,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;aACzB;iBAAM;gBACH,EAAE,CAAC,YAAY,CAAC,UAAU,CAAC,GAAG,EAAE,UAAC,GAAG,EAAE,MAA8B;oBAChE,MAAM,CAAC,IAAI,CAAC,OAAO,EAAE,UAAC,GAAG,EAAE,OAAO;wBAC9B,IAAI,OAAO,YAAY,EAAE,CAAC,MAAM,EAAE;4BAC9B,KAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,OAAO,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;4BACzC,GAAG,EAAE,CAAC;yBACT;oBACL,CAAC,CAAC,CAAC;gBACP,CAAC,CAAC,CAAC;aACN;QACL,CAAC,CAAC,CAAC;IACP,CAAC;IACD;;;;OAIG;IACI,8BAAW,GAAlB,UAAmB,GAAW,EAAE,QAAgB;QAAhD,iBAWC;QAVG,OAAO,IAAI,OAAO,CAAO,UAAC,GAAG;YACzB,EAAE,CAAC,YAAY,CAAC,UAAU,CAAC,GAAG,EAAE,UAAC,GAAG,EAAE,MAA8B;gBAChE,MAAM,CAAC,OAAO,CAAC,QAAQ,EAAE,UAAC,GAAG,EAAE,OAAO;oBAClC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,OAAO,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;wBACrC,KAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC;qBAClD;oBACD,GAAG,EAAE,CAAA;gBACT,CAAC,CAAC,CAAC;YACP,CAAC,CAAC,CAAC;QACP,CAAC,CAAC,CAAC;IACP,CAAC;IACD;;;OAGG;IACI,8BAAW,GAAlB;QACI,OAAO,IAAI,CAAC,QAAQ,CAAC;IACzB,CAAC;IACD;;;;OAIG;IACI,6BAAU,GAAjB,UAAkB,IAAY,EAAE,EAAa;QACzC,IAAM,QAAQ,GAAG,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;QACvD,IAAI,CAAC,cAAc,CAAC,QAAQ,EAAE,EAAE,CAAC,CAAC;IACtC,CAAC;IACM,iCAAc,GAArB,UAAsB,IAAY,EAAE,EAAa;QAC7C,EAAE,CAAC,YAAY,CAAC,OAAO,CAAC,IAAI,EAAE,UAAC,GAAG,EAAE,KAAK;YACrC,IAAG,EAAE,EAAC;gBACF,EAAE,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC;aAClB;QACL,CAAC,CAAC,CAAA;IACN,CAAC;;IAzEgB,QAAQ;QAD5B,OAAO;OACa,QAAQ,CA0E5B;IAAD,eAAC;CA1ED,AA0EC,IAAA;kBA1EoB,QAAQ","file":"","sourceRoot":"/","sourcesContent":["/*\n * Author: ahhh (new_q8@163.com)\n *\n * Description: 加载基类\n */\n\nconst { ccclass, property } = cc._decorator;\n\n@ccclass\nexport default class LoadBase {\n\n    private static _instance: LoadBase;\n    private loadList: Map<string, any> = new Map();\n\n    public static get instance() {\n        if (!this._instance) {\n            this._instance = new LoadBase();\n        }\n        return this._instance;\n    }\n    /**\n     * 加载预制体\n     * @param url 路径\n     * @param asserts 资源name\n     * @returns \n     */\n    public loadPrefab(url: string, asserts: string) {\n        return new Promise<void>((res) => {\n            if (CC_EDITOR) {\n                let path = `db://assets/prefabAB/carPrefab.prefab`;\n                this.editorLoad(path);\n            } else {\n                cc.assetManager.loadBundle(url, (ell, bundle: cc.AssetManager.Bundle) => {\n                    bundle.load(asserts, (ell, asserts) => {\n                        if (asserts instanceof cc.Prefab) {\n                            this.loadList.set(asserts.name, asserts);\n                            res();\n                        }\n                    });\n                });\n            }\n        });\n    }\n    /**\n     * 加载预制体文件夹\n     * @param url 路径\n     * @param fileName 文件夹name\n     */\n    public loadPrefabs(url: string, fileName: string) {\n        return new Promise<void>((res) => {\n            cc.assetManager.loadBundle(url, (ell, bundle: cc.AssetManager.Bundle) => {\n                bundle.loadDir(fileName, (ell, asserts) => {\n                    for (let i = 0; i < asserts.length; i++) {\n                        this.loadList.set(asserts[i].name, asserts[i]);\n                    }\n                    res()\n                });\n            });\n        });\n    }\n    /**\n     * 获得加载列表\n     * @returns \n     */\n    public getLoadList() {\n        return this.loadList;\n    }\n    /**\n     * 编辑器模式加载\n     * @param path \n     * @param cb \n     */\n    public editorLoad(path: string, cb?: Function) {\n        const fileUuid = Editor.assetdb.remote.urlToUuid(path);\n        this.getAssetByUuid(fileUuid, cb);\n    }\n    public getAssetByUuid(uuid: string, cb?: Function) {\n        cc.assetManager.loadAny(uuid, (err, asset) => {\n            if(cb){\n                cb(err, asset);\n            }\n        })\n    }\n}\n"]}